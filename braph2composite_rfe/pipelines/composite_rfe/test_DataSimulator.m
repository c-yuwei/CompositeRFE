%TEST_DATASIMULATOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	dsim = DataSimulator();
	 
	% get('ELCLASS')
	if isa(DataSimulator, 'ConcreteElement')
		assert(strcmp(DataSimulator().get('ELCLASS'), 'DataSimulator'), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator().get(''ELCLASS'') should return ''DataSimulator''.')
	end
	 
	% getBuild()
	assert(DataSimulator.getBuild() == 1 && DataSimulator.getBuild() > 0, ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getBuild() should return the DataSimulator build number.')
	assert(dsim.getBuild() == 1 && dsim.getBuild() > 0 , ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getBuild() should return the DataSimulator build number.')
	assert(Element.getBuild(dsim) == 1 && Element.getBuild(dsim) > 0, ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(dsim) should return the DataSimulator build number.')
	assert(Element.getBuild('DataSimulator') == 1 && Element.getBuild('DataSimulator') > 0, ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''DataSimulator'') should return the DataSimulator build number.')
	 
	% getClass()
	assert(strcmp(DataSimulator.getClass(), 'DataSimulator'), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getClass() should return ''DataSimulator''.')
	assert(strcmp(dsim.getClass(), 'DataSimulator'), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getClass() should return ''DataSimulator''.')
	assert(strcmp(Element.getClass(dsim), 'DataSimulator'), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(dsim) should return ''DataSimulator''.')
	assert(strcmp(Element.getClass('DataSimulator'), 'DataSimulator'), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''DataSimulator'') should return ''DataSimulator''.')
	 
	% getSubclasses()
	assert(isequal(DataSimulator.getSubclasses(), subclasses('DataSimulator', [], [], true)), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getSubclasses() should return the same result as subclasses(''DataSimulator'', [], [], true).')
	assert(isequal(dsim.getSubclasses(), subclasses('DataSimulator', [], [], true)), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''DataSimulator'', [], [], true).')
	assert(isequal(Element.getSubclasses(dsim), subclasses('DataSimulator', [], [], true)), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(dsim) should return the same result as subclasses(''DataSimulator'', [], [], true).')
	assert(isequal(Element.getSubclasses('DataSimulator'), subclasses('DataSimulator', [], [], true)), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''DataSimulator'') should return the same result as subclasses(''DataSimulator'', [], [], true).')
	 
	% getProps()
	assert(isempty(DataSimulator.getProps()) || isequal(DataSimulator.getProps(), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getProps() should return a row vector [1:1:N].')
	assert(isempty(DataSimulator.getProps()) || isequal(dsim.getProps(), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getProps() should return a row vector [1:1:N].')
	assert(isempty(DataSimulator.getProps()) || isequal(Element.getProps(dsim), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dsim) should return a row vector [1:1:N].')
	assert(isempty(DataSimulator.getProps()) || isequal(Element.getProps('DataSimulator'), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''DataSimulator'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) DataSimulator.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(DataSimulator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getProps(category) does not work.')
	tmp = cellfun(@(category) dsim.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(DataSimulator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(dsim, category), categories, 'UniformOutput', false);
	assert(isempty(DataSimulator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(dsim, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('DataSimulator', category), categories, 'UniformOutput', false);
	assert(isempty(DataSimulator.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(DataSimulator.getProps())), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''DataSimulator'', category) does not work.')
	 
	% getPropNumber()
	assert(DataSimulator.getPropNumber() == length(DataSimulator.getProps()), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getPropNumber() should return the number of properties.')
	assert(dsim.getPropNumber() == length(DataSimulator.getProps()), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(dsim) == length(DataSimulator.getProps()), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dsim) should return the number of properties.')
	assert(Element.getPropNumber('DataSimulator') == length(DataSimulator.getProps()), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''DataSimulator'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) DataSimulator.getPropNumber(category), categories)) == DataSimulator.getPropNumber(), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) dsim.getPropNumber(category), categories)) == DataSimulator.getPropNumber(), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(dsim, category), categories)) == DataSimulator.getPropNumber(), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(dsim, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('DataSimulator', category), categories)) == DataSimulator.getPropNumber(), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''DataSimulator'', category) does not work.')
	 
	% existsProp(prop)
	assert(~DataSimulator.existsProp(NaN), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.existsProp(prop) does not work.')
	assert(~dsim.existsProp(NaN), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.existsProp(prop) does not work.')
	assert(~Element.existsProp(dsim, NaN), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(dsim, prop) does not work.')
	assert(~Element.existsProp('DataSimulator', NaN), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''DataSimulator'', prop) does not work.')
	 
	assert_with_error('DataSimulator.existsProp(NaN)', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], dsim)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], dsim)
	assert_with_error('Element.existsProp(''DataSimulator'', NaN)', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		assert(DataSimulator.existsProp(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.existsProp(prop) does not work.')
		assert(dsim.existsProp(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.existsProp(prop) does not work.')
		assert(Element.existsProp(dsim, prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(dsim, prop) does not work.')
		assert(Element.existsProp('DataSimulator', prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''DataSimulator'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~DataSimulator.existsTag(''), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.existsTag(tag) does not work.')
	assert(~dsim.existsTag(''), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'dsim.existsTag(tag) does not work.')
	assert(~Element.existsTag(dsim, ''), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(dsim, tag) does not work.')
	assert(~Element.existsTag('DataSimulator', ''), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''DataSimulator'', tag) does not work.')
	 
	assert_with_error('DataSimulator.existsTag('''')', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], dsim)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], dsim)
	assert_with_error('Element.existsTag(''DataSimulator'', '''')', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
		assert(DataSimulator.existsTag(tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.existsTag(tag) does not work.')
		assert(dsim.existsTag(tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.existsTag(tag) does not work.')
		assert(Element.existsTag(dsim, tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(dsim, tga) does not work.')
		assert(Element.existsTag('DataSimulator', tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		assert(DataSimulator.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropProp(prop) does not work.')
		assert(dsim.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropProp(prop) does not work.')
		assert(Element.getPropProp(dsim, prop) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dsim, prop) does not work.')
		assert(Element.getPropProp('DataSimulator', prop) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''DataSimulator'', prop) does not work.')
	 
		tag = dsim.getPropTag(prop);
		assert(DataSimulator.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropProp(tag) does not work.')
		assert(dsim.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropProp(tag) does not work.')
		assert(Element.getPropProp(dsim, tag) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(dsim, tag) does not work.')
		assert(Element.getPropProp('DataSimulator', prop) == prop, ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		assert(strcmp(DataSimulator.getPropTag(prop), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropTag(prop) does not work.')
		assert(strcmp(dsim.getPropTag(prop), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(dsim, prop), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dsim, prop) does not work.')
		assert(strcmp(Element.getPropTag('DataSimulator', prop), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''DataSimulator'', prop) does not work.')
	 
		assert(strcmp(DataSimulator.getPropTag(tag), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropTag(tag) does not work.')
		assert(strcmp(dsim.getPropTag(tag), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(dsim, tag), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(dsim, tag) does not work.')
		assert(strcmp(Element.getPropTag('DataSimulator', prop), tag), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		assert(Category.existsCategory(DataSimulator.getPropCategory(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(dsim.getPropCategory(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dsim, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''DataSimulator'', prop) does not work.')
	 
		assert(Category.existsCategory(DataSimulator.getPropCategory(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(dsim.getPropCategory(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(dsim, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		assert(Format.existsFormat(DataSimulator.getPropFormat(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(dsim.getPropFormat(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dsim, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''DataSimulator'', prop) does not work.')
	 
		assert(Format.existsFormat(DataSimulator.getPropFormat(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(dsim.getPropFormat(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(dsim, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		assert(ischar(DataSimulator.getPropDescription(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropDescription(prop) does not work.')
		assert(ischar(dsim.getPropDescription(prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dsim, prop) does not work.')
		assert(ischar(Element.getPropDescription(dsim, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''DataSimulator'', prop) does not work.')
	 
		assert(ischar(DataSimulator.getPropDescription(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.getPropDescription(tag) does not work.')
		assert(ischar(dsim.getPropDescription(tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(dsim, tag) does not work.')
		assert(ischar(Element.getPropDescription(dsim, tag)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''DataSimulator'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		settings = DataSimulator.getPropSettings(prop);
		settings = dsim.getPropSettings(prop);
		settings = Element.getPropSettings(dsim, prop);
		settings = Element.getPropSettings('DataSimulator', prop);
	 
		settings = DataSimulator.getPropSettings(tag);
		settings = dsim.getPropSettings(tag);
		settings = Element.getPropSettings(dsim, tag);
		settings = Element.getPropSettings('DataSimulator', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		default = DataSimulator.getPropDefault(prop);
		default = dsim.getPropDefault(prop);
		default = Element.getPropDefault(dsim, prop);
		default = Element.getPropDefault('DataSimulator', prop);
	 
		default = DataSimulator.getPropDefault(tag);
		default = dsim.getPropDefault(tag);
		default = Element.getPropDefault(dsim, tag);
		default = Element.getPropDefault('DataSimulator', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		conditioned_default = DataSimulator.getPropDefaultConditioned(prop);
		conditioned_default = dsim.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(dsim, prop);
		conditioned_default = Element.getPropDefaultConditioned('DataSimulator', prop);
	 
		conditioned_default = DataSimulator.getPropDefaultConditioned(tag);
		conditioned_default = dsim.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(dsim, tag);
		conditioned_default = Element.getPropDefaultConditioned('DataSimulator', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:DataSimulator.getPropNumber()
		tag = dsim.getPropTag(prop);
	 
		assert(~DataSimulator.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.checkProp(prop, value) does not work.')
		assert(~dsim.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(dsim, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsim, prop, value) does not work.')
		assert(~Element.checkProp('DataSimulator', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DataSimulator'', prop, value) does not work.')
	 
		assert_with_error('DataSimulator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], prop, dsim)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], prop, dsim)
		assert_with_error('Element.checkProp(''DataSimulator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~DataSimulator.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.checkProp(tag, value) does not work.')
		assert(~dsim.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(dsim, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsim, tag, value) does not work.')
		assert(~Element.checkProp('DataSimulator', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DataSimulator'', tag, value) does not work.')
	 
		assert_with_error('DataSimulator.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], tag, dsim)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], tag, dsim)
		assert_with_error('Element.checkProp(''DataSimulator'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':DataSimulator:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(DataSimulator.checkProp(prop, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.checkProp(prop, <conditioned default value>) does not work.')
		assert(dsim.checkProp(prop, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(dsim, prop, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsim, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('DataSimulator', prop, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DataSimulator'', prop, <conditioned default value>) does not work.')
	 
		assert(DataSimulator.checkProp(tag, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.checkProp(tag, <conditioned default value>) does not work.')
		assert(dsim.checkProp(tag, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'dsim.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(dsim, tag, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(dsim, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('DataSimulator', tag, Element.getPropDefaultConditioned(DataSimulator, prop)), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''DataSimulator'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	for prop = 1:1:DataSimulator.getPropNumber()
	 
		% excluded props
		if any(prop == [DataSimulator.EXPORT_DATA DataSimulator.BA])
			continue
		end
	 
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					dsim.getr(prop) == DataSimulator.getNoValue(), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['Being a ' DataSimulator.getCategoryName(DataSimulator.getPropCategory(prop)) ', DataSimulator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DataSimulator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dsim.getr(TAG) == DataSimulator.getNoValue(), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['Being a ' DataSimulator.getCategoryName(DataSimulator.getPropCategory(prop)) ', DataSimulator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DataSimulator.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(dsim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dsim.getPropSettings(prop))
					assert( ...
						dsim.checkFormat(dsim.getPropFormat(prop), dsim.get(prop)), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dsim.checkFormat(dsim.getPropFormat(prop), dsim.get(prop), dsim.getPropSettings(prop)), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					dsim.getr(prop) == DataSimulator.getNoValue(), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['Being a ' DataSimulator.getCategoryName(DataSimulator.getPropCategory(prop)) ', DataSimulator.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DataSimulator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					dsim.getr(TAG) == DataSimulator.getNoValue(), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['Being a ' DataSimulator.getCategoryName(DataSimulator.getPropCategory(prop)) ', DataSimulator.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in DataSimulator.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':DataSimulator']);
				assert( ...
					~isa(dsim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(dsim.getPropSettings(prop))
					assert( ...
						dsim.checkFormat(dsim.getPropFormat(prop), dsim.get(prop)), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						dsim.checkFormat(dsim.getPropFormat(prop), dsim.get(prop), dsim.getPropSettings(prop)), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(dsim.getr(prop), DataSimulator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by DataSimulator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in DataSimulator.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(dsim.getr(TAG), DataSimulator.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' TAG ') must be inizialized to its default value ' ...
					'given by DataSimulator.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in DataSimulator.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	for prop = 1:1:DataSimulator.getPropNumber()
	 
		% excluded props
		if any(prop == [DataSimulator.EXPORT_DATA DataSimulator.BA])
			continue
		end
	 
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(dsim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dsim.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dsim.checkFormat(dsim.getPropFormat(prop), dsim.getr(prop),dsim.getPropSettings(prop)), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':DataSimulator']);
				assert( ...
					~isa(dsim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':DataSimulator']);
	% 			assert( ...
	% 				~isa(dsim.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
	% 				['DataSimulator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(dsim.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
	% 				['DataSimulator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				dsim.checkFormat(dsim.getPropFormat(prop), dsim.getr(prop),dsim.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
	% 				['DataSimulator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':DataSimulator']);
				assert( ...
					~isa(dsim.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(dsim.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					dsim.checkFormat(dsim.getPropFormat(prop), dsim.getr(prop),dsim.getPropSettings(prop)), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if dsim.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:DataSimulator');
					delete(ancestor(dsim.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(DataSimulator.getProps(Category.RESULT))
		for prop = 1:1:DataSimulator.getPropNumber()
	 
			% excluded props
			if any(prop == [DataSimulator.EXPORT_DATA DataSimulator.BA])
				continue
			end
	 
			switch DataSimulator.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						dsim.isLocked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~dsim.isLocked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator();
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		TAG = upper(DataSimulator.getPropTag(prop));
		assert( ...
			~dsim.isLocked(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~dsim.isLocked(TAG), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	dsim.lock()
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					dsim.isLocked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~dsim.isLocked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator();
	 
	warning_backup = warning('off', 'BRAPH2:DataSimulator');
	for prop = 1:1:DataSimulator.getPropNumber()
		dsim.lock(prop)
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					dsim.isLocked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~dsim.isLocked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator();
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		TAG = upper(DataSimulator.getPropTag(prop));
		assert( ...
			dsim.isChecked(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			dsim.isChecked(TAG), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	dsim.unchecked()
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		assert( ...
			~dsim.isChecked(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	dsim.checked()
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		assert( ...
			dsim.isChecked(prop), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			['DataSimulator.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic DataSimulator
	dsim_0 = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	% DataSimulator with 1st callbacks
	dsim_1 = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, dsim_0.getCallback(4), ..., ...
		DataSimulator.ID, dsim_0.getCallback(5), ..., ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, dsim_0.getCallback(9), ..., ...
		DataSimulator.P, dsim_0.getCallback(10), ..., ...
		DataSimulator.D, dsim_0.getCallback(11), ..., ...
		DataSimulator.N, dsim_0.getCallback(12), ..., ...
		DataSimulator.TIME_STEP, dsim_0.getCallback(13), ..., ...
		DataSimulator.N_SUB, dsim_0.getCallback(14), ..., ...
		DataSimulator.DIRECTORY, dsim_0.getCallback(15), ..., ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	prop_number = DataSimulator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsim_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsim_1.get(prop), dsim_0.get(prop)) && ~isa(dsim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsim_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% DataSimulator with 2nd callbacks
	dsim_2 = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, dsim_1.getCallback(4), ..., ...
		DataSimulator.ID, dsim_1.getCallback(5), ..., ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, dsim_1.getCallback(9), ..., ...
		DataSimulator.P, dsim_1.getCallback(10), ..., ...
		DataSimulator.D, dsim_1.getCallback(11), ..., ...
		DataSimulator.N, dsim_1.getCallback(12), ..., ...
		DataSimulator.TIME_STEP, dsim_1.getCallback(13), ..., ...
		DataSimulator.N_SUB, dsim_1.getCallback(14), ..., ...
		DataSimulator.DIRECTORY, dsim_1.getCallback(15), ..., ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	prop_number = DataSimulator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsim_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsim_2.get(prop), dsim_0.get(prop)) && ~isa(dsim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsim_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% DataSimulator with 3rd callbacks
	dsim_3 = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, dsim_2.getCallback(4), ..., ...
		DataSimulator.ID, dsim_2.getCallback(5), ..., ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, dsim_2.getCallback(9), ..., ...
		DataSimulator.P, dsim_2.getCallback(10), ..., ...
		DataSimulator.D, dsim_2.getCallback(11), ..., ...
		DataSimulator.N, dsim_2.getCallback(12), ..., ...
		DataSimulator.TIME_STEP, dsim_2.getCallback(13), ..., ...
		DataSimulator.N_SUB, dsim_2.getCallback(14), ..., ...
		DataSimulator.DIRECTORY, dsim_2.getCallback(15), ..., ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	prop_number = DataSimulator.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(dsim_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(dsim_3.get(prop), dsim_0.get(prop)) && ~isa(dsim_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(dsim_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	dsim = DataSimulator();
	 
	dsim_copy = dsim.copy();
	 
	assert(dsim_copy ~= dsim, ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(dsim_copy, dsim), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		value = dsim.getr(prop);
		value_copy = dsim_copy.getr(prop);
		switch DataSimulator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					dsim_copy.isLocked(prop) == dsim.isLocked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dsim_copy.isChecked(prop) == dsim.isChecked(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					dsim_copy.getPropSeed(prop) == dsim.getPropSeed(prop), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		if DataSimulator.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':DataSimulator']);
			% dsim.memorize(prop);
			% warning(warning_backup)
		elseif DataSimulator.getPropCategory(prop) == Category.EVANESCENT && dsim.getPropFormat(prop) == Format.HANDLE
			dsim.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:DataSimulator');
			delete(ancestor(dsim.get(prop), 'figure'))
			warning(warning_backup)
		else
			dsim.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	dsim_copy = dsim.copy();
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		value = dsim.getr(prop);
		value_copy = dsim_copy.getr(prop);
		switch DataSimulator.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						dsim_copy.isLocked(prop) == dsim.isLocked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsim_copy.isChecked(prop) == dsim.isChecked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsim_copy.getPropSeed(prop) == dsim.getPropSeed(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	dsim_0 = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, dsim_0.getCallback(4), ..., ...
		DataSimulator.ID, dsim_0.getCallback(5), ..., ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, dsim_0.getCallback(9), ..., ...
		DataSimulator.P, dsim_0.getCallback(10), ..., ...
		DataSimulator.D, dsim_0.getCallback(11), ..., ...
		DataSimulator.N, dsim_0.getCallback(12), ..., ...
		DataSimulator.TIME_STEP, dsim_0.getCallback(13), ..., ...
		DataSimulator.N_SUB, dsim_0.getCallback(14), ..., ...
		DataSimulator.DIRECTORY, dsim_0.getCallback(15), ..., ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	dsim_copy = dsim.copy();
	dsim_0_copy = dsim_copy.getr('ID').get('EL');
	 
	for prop = 1:1:DataSimulator.getPropNumber()
		value = dsim.getr(prop);
		value_copy = dsim_copy.getr(prop);
		switch DataSimulator.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					'DataSimulator.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
							'DataSimulator.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == dsim_0.getCallback(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The callback should be obtained from DataSimulator.getCallback().' ...
						)
					assert( ...
						value_copy == dsim_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The callback should be obtained from DataSimulator.getCallback().' ...
						)
				end
	 
					assert( ...
						dsim_copy.isLocked(prop) == dsim.isLocked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsim_copy.isChecked(prop) == dsim.isChecked(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						dsim_copy.getPropSeed(prop) == dsim.getPropSeed(prop), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim_template = DataSimulator();
	dsim = DataSimulator('TEMPLATE', dsim_template);
	 
	for prop = 1:1:DataSimulator.getPropNumber()
	 
		% excluded props
		if any(prop == [DataSimulator.EXPORT_DATA DataSimulator.BA])
			continue
		end
	 
		TAG = upper(DataSimulator.getPropTag(prop));
		switch DataSimulator.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == DataSimulator.TEMPLATE
					assert( ...
						isa(dsim.getr(prop), 'DataSimulator'), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator TEMPLATE does not work. DataSimulator.getr(''TEMPLATE'') should be a DataSimulator element.' ...
						)
					assert( ...
						isa(dsim_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						'DataSimulator TEMPLATE does not work. DataSimulator_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(dsim.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator TEMPLATE does not work. DataSimulator.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						dsim.getr(prop).get('EL') == dsim_template && dsim.getr(prop).get('PROP') == prop && strcmp(dsim.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator TEMPLATE does not work. DataSimulator.getr(' TAG ') should be a Callback to dsim_template.' TAG '.'] ...
						)
					assert( ...
						isa(dsim_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
						['DataSimulator TEMPLATE does not work. DataSimulator_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(dsim.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator TEMPLATE does not work. DataSimulator.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(dsim_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
					['DataSimulator TEMPLATE does not work. DataSimulator_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'datasimulator_to_be_erased.b2'];
	 
	Element.save(dsim, filename)
	 
	dsim_loaded = Element.load(filename);
	 
	assert( ...
		isequal(dsim.copy(), dsim_loaded), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.save(dsim) and/or DataSimulator.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	dsim = DataSimulator( ...
		DataSimulator.ELCLASS, DataSimulator.getNoValue(), ...
		DataSimulator.NAME, DataSimulator.getNoValue(), ...
		DataSimulator.DESCRIPTION, DataSimulator.getNoValue(), ...
		DataSimulator.TEMPLATE, DataSimulator.getPropDefault(DataSimulator.TEMPLATE), ...
		DataSimulator.ID, DataSimulator.getPropDefault(DataSimulator.ID), ...
		DataSimulator.LABEL, DataSimulator.getPropDefault(DataSimulator.LABEL), ...
		DataSimulator.NOTES, DataSimulator.getPropDefault(DataSimulator.NOTES), ...
		DataSimulator.TOSTRING, DataSimulator.getNoValue(), ...
		DataSimulator.BA, DataSimulator.getPropDefault(DataSimulator.BA), ...
		DataSimulator.P, DataSimulator.getPropDefault(DataSimulator.P), ...
		DataSimulator.D, DataSimulator.getPropDefault(DataSimulator.D), ...
		DataSimulator.N, DataSimulator.getPropDefault(DataSimulator.N), ...
		DataSimulator.TIME_STEP, DataSimulator.getPropDefault(DataSimulator.TIME_STEP), ...
		DataSimulator.N_SUB, DataSimulator.getPropDefault(DataSimulator.N_SUB), ...
		DataSimulator.DIRECTORY, DataSimulator.getPropDefault(DataSimulator.DIRECTORY), ...
		DataSimulator.GRAPH_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_DATA, DataSimulator.getNoValue(), ...
		DataSimulator.SIM_GR, DataSimulator.getNoValue(), ...
		DataSimulator.EXPORT_DATA, DataSimulator.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(dsim);
	[dsim_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(dsim_dec ~= dsim, ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		'DataSimulator.encodeJSON() or DataSimulator.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) DataSimulator.getPropFormat(prop), num2cell(DataSimulator.getProps())) == Format.HANDLE) && all(cellfun(@(prop) DataSimulator.getPropFormat(prop), num2cell(DataSimulator.getProps())) == Format.NET)
		assert(isequal(dsim_dec, dsim), ...
			[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
			'DataSimulator.encodeJSON() or DataSimulator.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':DataSimulator:' BRAPH2.FAIL_TEST], ...
		[' When testing DataSimulator no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

