%TEST_NNXMLP_FEATUREIMPORTANCEACROSSFUN

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN();
	 
	% get('ELCLASS')
	if isa(NNxMLP_FeatureImportanceAcrossFUN, 'ConcreteElement')
		assert(strcmp(NNxMLP_FeatureImportanceAcrossFUN().get('ELCLASS'), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN().get(''ELCLASS'') should return ''NNxMLP_FeatureImportanceAcrossFUN''.')
	end
	 
	% getBuild()
	assert(NNxMLP_FeatureImportanceAcrossFUN.getBuild() == 1 && NNxMLP_FeatureImportanceAcrossFUN.getBuild() > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getBuild() should return the NNxMLP_FeatureImportanceAcrossFUN build number.')
	assert(nnfiam.getBuild() == 1 && nnfiam.getBuild() > 0 , ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getBuild() should return the NNxMLP_FeatureImportanceAcrossFUN build number.')
	assert(Element.getBuild(nnfiam) == 1 && Element.getBuild(nnfiam) > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(nnfiam) should return the NNxMLP_FeatureImportanceAcrossFUN build number.')
	assert(Element.getBuild('NNxMLP_FeatureImportanceAcrossFUN') == 1 && Element.getBuild('NNxMLP_FeatureImportanceAcrossFUN') > 0, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''NNxMLP_FeatureImportanceAcrossFUN'') should return the NNxMLP_FeatureImportanceAcrossFUN build number.')
	 
	% getClass()
	assert(strcmp(NNxMLP_FeatureImportanceAcrossFUN.getClass(), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getClass() should return ''NNxMLP_FeatureImportanceAcrossFUN''.')
	assert(strcmp(nnfiam.getClass(), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getClass() should return ''NNxMLP_FeatureImportanceAcrossFUN''.')
	assert(strcmp(Element.getClass(nnfiam), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(nnfiam) should return ''NNxMLP_FeatureImportanceAcrossFUN''.')
	assert(strcmp(Element.getClass('NNxMLP_FeatureImportanceAcrossFUN'), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''NNxMLP_FeatureImportanceAcrossFUN'') should return ''NNxMLP_FeatureImportanceAcrossFUN''.')
	 
	% getSubclasses()
	assert(isequal(NNxMLP_FeatureImportanceAcrossFUN.getSubclasses(), subclasses('NNxMLP_FeatureImportanceAcrossFUN', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportanceAcrossFUN'', [], [], true).')
	assert(isequal(nnfiam.getSubclasses(), subclasses('NNxMLP_FeatureImportanceAcrossFUN', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''NNxMLP_FeatureImportanceAcrossFUN'', [], [], true).')
	assert(isequal(Element.getSubclasses(nnfiam), subclasses('NNxMLP_FeatureImportanceAcrossFUN', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(nnfiam) should return the same result as subclasses(''NNxMLP_FeatureImportanceAcrossFUN'', [], [], true).')
	assert(isequal(Element.getSubclasses('NNxMLP_FeatureImportanceAcrossFUN'), subclasses('NNxMLP_FeatureImportanceAcrossFUN', [], [], true)), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''NNxMLP_FeatureImportanceAcrossFUN'') should return the same result as subclasses(''NNxMLP_FeatureImportanceAcrossFUN'', [], [], true).')
	 
	% getProps()
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(NNxMLP_FeatureImportanceAcrossFUN.getProps(), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(nnfiam.getProps(), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getProps() should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(Element.getProps(nnfiam), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfiam) should return a row vector [1:1:N].')
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(Element.getProps('NNxMLP_FeatureImportanceAcrossFUN'), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportanceAcrossFUN'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) NNxMLP_FeatureImportanceAcrossFUN.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getProps(category) does not work.')
	tmp = cellfun(@(category) nnfiam.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(nnfiam, category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(nnfiam, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('NNxMLP_FeatureImportanceAcrossFUN', category), categories, 'UniformOutput', false);
	assert(isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(NNxMLP_FeatureImportanceAcrossFUN.getProps())), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''NNxMLP_FeatureImportanceAcrossFUN'', category) does not work.')
	 
	% getPropNumber()
	assert(NNxMLP_FeatureImportanceAcrossFUN.getPropNumber() == length(NNxMLP_FeatureImportanceAcrossFUN.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getPropNumber() should return the number of properties.')
	assert(nnfiam.getPropNumber() == length(NNxMLP_FeatureImportanceAcrossFUN.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(nnfiam) == length(NNxMLP_FeatureImportanceAcrossFUN.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfiam) should return the number of properties.')
	assert(Element.getPropNumber('NNxMLP_FeatureImportanceAcrossFUN') == length(NNxMLP_FeatureImportanceAcrossFUN.getProps()), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportanceAcrossFUN'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(category), categories)) == NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) nnfiam.getPropNumber(category), categories)) == NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(nnfiam, category), categories)) == NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(nnfiam, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('NNxMLP_FeatureImportanceAcrossFUN', category), categories)) == NNxMLP_FeatureImportanceAcrossFUN.getPropNumber(), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''NNxMLP_FeatureImportanceAcrossFUN'', category) does not work.')
	 
	% existsProp(prop)
	assert(~NNxMLP_FeatureImportanceAcrossFUN.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.existsProp(prop) does not work.')
	assert(~nnfiam.existsProp(NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.existsProp(prop) does not work.')
	assert(~Element.existsProp(nnfiam, NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(nnfiam, prop) does not work.')
	assert(~Element.existsProp('NNxMLP_FeatureImportanceAcrossFUN', NaN), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportanceAcrossFUN.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], nnfiam)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], nnfiam)
	assert_with_error('Element.existsProp(''NNxMLP_FeatureImportanceAcrossFUN'', NaN)', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		assert(NNxMLP_FeatureImportanceAcrossFUN.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.existsProp(prop) does not work.')
		assert(nnfiam.existsProp(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.existsProp(prop) does not work.')
		assert(Element.existsProp(nnfiam, prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(nnfiam, prop) does not work.')
		assert(Element.existsProp('NNxMLP_FeatureImportanceAcrossFUN', prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~NNxMLP_FeatureImportanceAcrossFUN.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.existsTag(tag) does not work.')
	assert(~nnfiam.existsTag(''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'nnfiam.existsTag(tag) does not work.')
	assert(~Element.existsTag(nnfiam, ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(nnfiam, tag) does not work.')
	assert(~Element.existsTag('NNxMLP_FeatureImportanceAcrossFUN', ''), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	 
	assert_with_error('NNxMLP_FeatureImportanceAcrossFUN.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], nnfiam)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], nnfiam)
	assert_with_error('Element.existsTag(''NNxMLP_FeatureImportanceAcrossFUN'', '''')', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
		assert(NNxMLP_FeatureImportanceAcrossFUN.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.existsTag(tag) does not work.')
		assert(nnfiam.existsTag(tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.existsTag(tag) does not work.')
		assert(Element.existsTag(nnfiam, tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(nnfiam, tga) does not work.')
		assert(Element.existsTag('NNxMLP_FeatureImportanceAcrossFUN', tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		assert(NNxMLP_FeatureImportanceAcrossFUN.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropProp(prop) does not work.')
		assert(nnfiam.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropProp(prop) does not work.')
		assert(Element.getPropProp(nnfiam, prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfiam, prop) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportanceAcrossFUN', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
		tag = nnfiam.getPropTag(prop);
		assert(NNxMLP_FeatureImportanceAcrossFUN.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropProp(tag) does not work.')
		assert(nnfiam.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropProp(tag) does not work.')
		assert(Element.getPropProp(nnfiam, tag) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(nnfiam, tag) does not work.')
		assert(Element.getPropProp('NNxMLP_FeatureImportanceAcrossFUN', prop) == prop, ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		assert(strcmp(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop) does not work.')
		assert(strcmp(nnfiam.getPropTag(prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(nnfiam, prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfiam, prop) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportanceAcrossFUN', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
		assert(strcmp(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropTag(tag) does not work.')
		assert(strcmp(nnfiam.getPropTag(tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(nnfiam, tag), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(nnfiam, tag) does not work.')
		assert(strcmp(Element.getPropTag('NNxMLP_FeatureImportanceAcrossFUN', prop), tag), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(nnfiam.getPropCategory(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfiam, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
		assert(Category.existsCategory(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(nnfiam.getPropCategory(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(nnfiam, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(nnfiam.getPropFormat(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfiam, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
		assert(Format.existsFormat(NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(nnfiam.getPropFormat(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(nnfiam, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		assert(ischar(NNxMLP_FeatureImportanceAcrossFUN.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropDescription(prop) does not work.')
		assert(ischar(nnfiam.getPropDescription(prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfiam, prop) does not work.')
		assert(ischar(Element.getPropDescription(nnfiam, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportanceAcrossFUN'', prop) does not work.')
	 
		assert(ischar(NNxMLP_FeatureImportanceAcrossFUN.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.getPropDescription(tag) does not work.')
		assert(ischar(nnfiam.getPropDescription(tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(nnfiam, tag) does not work.')
		assert(ischar(Element.getPropDescription(nnfiam, tag)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''NNxMLP_FeatureImportanceAcrossFUN'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		settings = NNxMLP_FeatureImportanceAcrossFUN.getPropSettings(prop);
		settings = nnfiam.getPropSettings(prop);
		settings = Element.getPropSettings(nnfiam, prop);
		settings = Element.getPropSettings('NNxMLP_FeatureImportanceAcrossFUN', prop);
	 
		settings = NNxMLP_FeatureImportanceAcrossFUN.getPropSettings(tag);
		settings = nnfiam.getPropSettings(tag);
		settings = Element.getPropSettings(nnfiam, tag);
		settings = Element.getPropSettings('NNxMLP_FeatureImportanceAcrossFUN', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		default = NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(prop);
		default = nnfiam.getPropDefault(prop);
		default = Element.getPropDefault(nnfiam, prop);
		default = Element.getPropDefault('NNxMLP_FeatureImportanceAcrossFUN', prop);
	 
		default = NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(tag);
		default = nnfiam.getPropDefault(tag);
		default = Element.getPropDefault(nnfiam, tag);
		default = Element.getPropDefault('NNxMLP_FeatureImportanceAcrossFUN', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		conditioned_default = NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(prop);
		conditioned_default = nnfiam.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(nnfiam, prop);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportanceAcrossFUN', prop);
	 
		conditioned_default = NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(tag);
		conditioned_default = nnfiam.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(nnfiam, tag);
		conditioned_default = Element.getPropDefaultConditioned('NNxMLP_FeatureImportanceAcrossFUN', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		tag = nnfiam.getPropTag(prop);
	 
		assert(~NNxMLP_FeatureImportanceAcrossFUN.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.checkProp(prop, value) does not work.')
		assert(~nnfiam.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(nnfiam, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfiam, prop, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportanceAcrossFUN', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', prop, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportanceAcrossFUN.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], prop, nnfiam)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], prop, nnfiam)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~NNxMLP_FeatureImportanceAcrossFUN.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.checkProp(tag, value) does not work.')
		assert(~nnfiam.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(nnfiam, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfiam, tag, value) does not work.')
		assert(~Element.checkProp('NNxMLP_FeatureImportanceAcrossFUN', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', tag, value) does not work.')
	 
		assert_with_error('NNxMLP_FeatureImportanceAcrossFUN.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], tag, nnfiam)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], tag, nnfiam)
		assert_with_error('Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(NNxMLP_FeatureImportanceAcrossFUN.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.checkProp(prop, <conditioned default value>) does not work.')
		assert(nnfiam.checkProp(prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfiam, prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfiam, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportanceAcrossFUN', prop, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', prop, <conditioned default value>) does not work.')
	 
		assert(NNxMLP_FeatureImportanceAcrossFUN.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.checkProp(tag, <conditioned default value>) does not work.')
		assert(nnfiam.checkProp(tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'nnfiam.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(nnfiam, tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(nnfiam, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('NNxMLP_FeatureImportanceAcrossFUN', tag, Element.getPropDefaultConditioned(NNxMLP_FeatureImportanceAcrossFUN, prop)), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''NNxMLP_FeatureImportanceAcrossFUN'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					nnfiam.getr(prop) == NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceAcrossFUN.getCategoryName(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)) ', NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfiam.getr(TAG) == NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceAcrossFUN.getCategoryName(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)) ', NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(nnfiam.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfiam.getPropSettings(prop))
					assert( ...
						nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.get(prop), nnfiam.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					nnfiam.getr(prop) == NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceAcrossFUN.getCategoryName(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)) ', NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					nnfiam.getr(TAG) == NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['Being a ' NNxMLP_FeatureImportanceAcrossFUN.getCategoryName(NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)) ', NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN']);
				assert( ...
					~isa(nnfiam.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(nnfiam.getPropSettings(prop))
					assert( ...
						nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.get(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.get(prop), nnfiam.getPropSettings(prop)), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(nnfiam.getr(prop), NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(nnfiam.getr(TAG), NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') must be inizialized to its default value ' ...
					'given by NNxMLP_FeatureImportanceAcrossFUN.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(nnfiam.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfiam.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.getr(prop),nnfiam.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN']);
				assert( ...
					~isa(nnfiam.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN']);
	% 			assert( ...
	% 				~isa(nnfiam.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceAcrossFUN.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(nnfiam.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.getr(prop),nnfiam.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
	% 				['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN']);
				assert( ...
					~isa(nnfiam.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(nnfiam.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					nnfiam.checkFormat(nnfiam.getPropFormat(prop), nnfiam.getr(prop),nnfiam.getPropSettings(prop)), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if nnfiam.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceAcrossFUN');
					delete(ancestor(nnfiam.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(NNxMLP_FeatureImportanceAcrossFUN.getProps(Category.RESULT))
		for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						nnfiam.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~nnfiam.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		assert( ...
			~nnfiam.isLocked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~nnfiam.isLocked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	nnfiam.lock()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					nnfiam.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~nnfiam.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN();
	 
	warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceAcrossFUN');
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		nnfiam.lock(prop)
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					nnfiam.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~nnfiam.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		assert( ...
			nnfiam.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			nnfiam.isChecked(TAG), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	nnfiam.unchecked()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		assert( ...
			~nnfiam.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	nnfiam.checked()
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		assert( ...
			nnfiam.isChecked(prop), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			['NNxMLP_FeatureImportanceAcrossFUN.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic NNxMLP_FeatureImportanceAcrossFUN
	nnfiam_0 = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	% NNxMLP_FeatureImportanceAcrossFUN with 1st callbacks
	nnfiam_1 = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, nnfiam_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, nnfiam_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, nnfiam_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, nnfiam_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.P, nnfiam_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, nnfiam_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, nnfiam_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, nnfiam_0.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, nnfiam_0.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, nnfiam_0.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, nnfiam_0.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, nnfiam_0.getCallback(32), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, nnfiam_0.getCallback(33), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, nnfiam_0.getCallback(34) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceAcrossFUN.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfiam_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfiam_1.get(prop), nnfiam_0.get(prop)) && ~isa(nnfiam_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfiam_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportanceAcrossFUN with 2nd callbacks
	nnfiam_2 = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, nnfiam_1.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, nnfiam_1.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, nnfiam_1.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, nnfiam_1.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.P, nnfiam_1.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, nnfiam_1.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, nnfiam_1.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, nnfiam_1.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, nnfiam_1.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, nnfiam_1.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, nnfiam_1.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, nnfiam_1.getCallback(32), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, nnfiam_1.getCallback(33), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, nnfiam_1.getCallback(34) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceAcrossFUN.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfiam_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfiam_2.get(prop), nnfiam_0.get(prop)) && ~isa(nnfiam_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfiam_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% NNxMLP_FeatureImportanceAcrossFUN with 3rd callbacks
	nnfiam_3 = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, nnfiam_2.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, nnfiam_2.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, nnfiam_2.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, nnfiam_2.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.P, nnfiam_2.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, nnfiam_2.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, nnfiam_2.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, nnfiam_2.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, nnfiam_2.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, nnfiam_2.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, nnfiam_2.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, nnfiam_2.getCallback(32), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, nnfiam_2.getCallback(33), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, nnfiam_2.getCallback(34) ... ...
		);
	 
	prop_number = NNxMLP_FeatureImportanceAcrossFUN.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(nnfiam_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(nnfiam_3.get(prop), nnfiam_0.get(prop)) && ~isa(nnfiam_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(nnfiam_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN();
	 
	nnfiam_copy = nnfiam.copy();
	 
	assert(nnfiam_copy ~= nnfiam, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(nnfiam_copy, nnfiam), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		value = nnfiam.getr(prop);
		value_copy = nnfiam_copy.getr(prop);
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					nnfiam_copy.isLocked(prop) == nnfiam.isLocked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfiam_copy.isChecked(prop) == nnfiam.isChecked(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					nnfiam_copy.getPropSeed(prop) == nnfiam.getPropSeed(prop), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		if NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN']);
			% nnfiam.memorize(prop);
			% warning(warning_backup)
		elseif NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop) == Category.EVANESCENT && nnfiam.getPropFormat(prop) == Format.HANDLE
			nnfiam.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:NNxMLP_FeatureImportanceAcrossFUN');
			delete(ancestor(nnfiam.get(prop), 'figure'))
			warning(warning_backup)
		else
			nnfiam.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	nnfiam_copy = nnfiam.copy();
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		value = nnfiam.getr(prop);
		value_copy = nnfiam_copy.getr(prop);
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						nnfiam_copy.isLocked(prop) == nnfiam.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfiam_copy.isChecked(prop) == nnfiam.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfiam_copy.getPropSeed(prop) == nnfiam.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	nnfiam_0 = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, nnfiam_0.getCallback(4), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, nnfiam_0.getCallback(5), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, nnfiam_0.getCallback(9), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, nnfiam_0.getCallback(10), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.P, nnfiam_0.getCallback(11), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, nnfiam_0.getCallback(13), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, nnfiam_0.getCallback(14), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, nnfiam_0.getCallback(15), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, nnfiam_0.getCallback(29), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, nnfiam_0.getCallback(30), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, nnfiam_0.getCallback(31), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, nnfiam_0.getCallback(32), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, nnfiam_0.getCallback(33), ..., ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, nnfiam_0.getCallback(34) ... ...
		);
	 
	nnfiam_copy = nnfiam.copy();
	nnfiam_0_copy = nnfiam_copy.getr('ID').get('EL');
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
		value = nnfiam.getr(prop);
		value_copy = nnfiam_copy.getr(prop);
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
							'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == nnfiam_0.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportanceAcrossFUN.getCallback().' ...
						)
					assert( ...
						value_copy == nnfiam_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The callback should be obtained from NNxMLP_FeatureImportanceAcrossFUN.getCallback().' ...
						)
				end
	 
					assert( ...
						nnfiam_copy.isLocked(prop) == nnfiam.isLocked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfiam_copy.isChecked(prop) == nnfiam.isChecked(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						nnfiam_copy.getPropSeed(prop) == nnfiam.getPropSeed(prop), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam_template = NNxMLP_FeatureImportanceAcrossFUN();
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN('TEMPLATE', nnfiam_template);
	 
	for prop = 1:1:NNxMLP_FeatureImportanceAcrossFUN.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(NNxMLP_FeatureImportanceAcrossFUN.getPropTag(prop));
		switch NNxMLP_FeatureImportanceAcrossFUN.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE
					assert( ...
						isa(nnfiam.getr(prop), 'NNxMLP_FeatureImportanceAcrossFUN'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN.getr(''TEMPLATE'') should be a NNxMLP_FeatureImportanceAcrossFUN element.' ...
						)
					assert( ...
						isa(nnfiam_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						'NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(nnfiam.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						nnfiam.getr(prop).get('EL') == nnfiam_template && nnfiam.getr(prop).get('PROP') == prop && strcmp(nnfiam.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') should be a Callback to nnfiam_template.' TAG '.'] ...
						)
					assert( ...
						isa(nnfiam_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
						['NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(nnfiam.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(nnfiam_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
					['NNxMLP_FeatureImportanceAcrossFUN TEMPLATE does not work. NNxMLP_FeatureImportanceAcrossFUN_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'nnxmlp_featureimportanceacrossfun_to_be_erased.b2'];
	 
	Element.save(nnfiam, filename)
	 
	nnfiam_loaded = Element.load(filename);
	 
	assert( ...
		isequal(nnfiam.copy(), nnfiam_loaded), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.save(nnfiam) and/or NNxMLP_FeatureImportanceAcrossFUN.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	nnfiam = NNxMLP_FeatureImportanceAcrossFUN( ...
		NNxMLP_FeatureImportanceAcrossFUN.ELCLASS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.NAME, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.DESCRIPTION, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.TEMPLATE), ...
		NNxMLP_FeatureImportanceAcrossFUN.ID, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.ID), ...
		NNxMLP_FeatureImportanceAcrossFUN.LABEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.LABEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.NOTES, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NOTES), ...
		NNxMLP_FeatureImportanceAcrossFUN.TOSTRING, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.D), ...
		NNxMLP_FeatureImportanceAcrossFUN.NN, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.NN), ...
		NNxMLP_FeatureImportanceAcrossFUN.P, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.P), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SEEDS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_CONFIDENCE_INTERVALS), ...
		NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.SIG_LEVEL), ...
		NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.APPLY_BONFERRONI), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_INPUTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COMP_FEATURE_INDICES, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.D_SHUFFLED, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.BASELINE_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.PERM_SHUFFLED_LOSS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.CONFIDENCE_INTERVALS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.STAT_SIG_MASK, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.RESHAPED_FEATURE_IMPORTANCE, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.MAP_TO_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.COUNT_ELEMENTS, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.FLATTEN_CELL, NNxMLP_FeatureImportanceAcrossFUN.getNoValue(), ...
		NNxMLP_FeatureImportanceAcrossFUN.VERBOSE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.VERBOSE), ...
		NNxMLP_FeatureImportanceAcrossFUN.WAITBAR, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.WAITBAR), ...
		NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.INTERRUPTIBLE), ...
		NNxMLP_FeatureImportanceAcrossFUN.BA, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.BA), ...
		NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.GR_FUN_LIST), ...
		NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE, NNxMLP_FeatureImportanceAcrossFUN.getPropDefault(NNxMLP_FeatureImportanceAcrossFUN.AE_TEMPLATE) ...
		);
	 
	[json, struct, el_list] = encodeJSON(nnfiam);
	[nnfiam_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(nnfiam_dec ~= nnfiam, ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		'NNxMLP_FeatureImportanceAcrossFUN.encodeJSON() or NNxMLP_FeatureImportanceAcrossFUN.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(prop), num2cell(NNxMLP_FeatureImportanceAcrossFUN.getProps())) == Format.HANDLE) && all(cellfun(@(prop) NNxMLP_FeatureImportanceAcrossFUN.getPropFormat(prop), num2cell(NNxMLP_FeatureImportanceAcrossFUN.getProps())) == Format.NET)
		assert(isequal(nnfiam_dec, nnfiam), ...
			[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
			'NNxMLP_FeatureImportanceAcrossFUN.encodeJSON() or NNxMLP_FeatureImportanceAcrossFUN.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: GUI
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	gui = GUIElement('PE', fi, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 13: Sanity check
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	create_data_NN_CLA_FUN_XLS() % only creates files if the example folder doesn't already exist
	
	% Load BrainAtlas
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [fileparts(which('NNDataPoint_FUN_CLA')) filesep 'Example data NN CLA FUN XLS' filesep 'atlas.xlsx'], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Load Groups of SubjectFUN
	im_gr1 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_FUN_CLA')) filesep 'Example data NN CLA FUN XLS' filesep 'FUN_Group_1_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr1 = im_gr1.get('GR');
	
	im_gr2 = ImporterGroupSubjectFUN_XLS( ...
	    'DIRECTORY', [fileparts(which('NNDataPoint_FUN_CLA')) filesep 'Example data NN CLA FUN XLS' filesep 'FUN_Group_2_XLS'], ...
	    'BA', ba, ...
	    'WAITBAR', true ...
	    );
	
	gr2 = im_gr2.get('GR');
	
	% Analysis FUN WU
	a_WU1 = AnalyzeEnsemble_FUN_WU( ...
	    'GR', gr1 ...
	    );
	
	a_WU2 = AnalyzeEnsemble_FUN_WU( ...
	    'TEMPLATE', a_WU1, ...
	    'GR', gr2 ...
	    );
	
	a_WU1.memorize('G_DICT');
	a_WU2.memorize('G_DICT');
	
	%% Create NNData composed of corresponding NNDataPoints
	% create item lists of NNDataPoint_Graph_CLA
	it_list1 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'TARGET_CLASS', {gr1.get('ID')}), ...
	    a_WU1.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	it_list2 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
	    'ID', x.get('ID'), ...
	    'G', x, ...
	    'TARGET_CLASS', {gr2.get('ID')}), ...
	    a_WU2.get('G_DICT').get('IT_LIST'), ...
	    'UniformOutput', false);
	
	% create NNDataPoint_Graph_CLA DICT items
	it_class = 'NNDataPoint_Graph_CLA';
	dp_list1 = IndexedDictionary(...
	        'IT_CLASS', it_class, ...
	        'IT_LIST', it_list1 ...
	        );
	
	dp_list2 = IndexedDictionary(...
	        'IT_CLASS', it_class, ...
	        'IT_LIST', it_list2 ...
	        );
	
	% create a NNDataset containing the NNDataPoint_FUN_CLA DICT
	d1 = NNDataset( ...
	    'DP_CLASS', it_class, ...
	    'DP_DICT', dp_list1 ...
	    );
	
	d2 = NNDataset( ...
	    'DP_CLASS', it_class, ...
	    'DP_DICT', dp_list2 ...
	    );
	
	% Split the NNData into training set and test set
	d_split1 = NNDatasetSplit('D', d1, 'SPLIT', {0.7, 0.3});
	d_split2 = NNDatasetSplit('D', d2, 'SPLIT', {0.7, 0.3});
	
	d_training = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1)}).get('D');
	d_test = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2)}).get('D');
	
	% Train a NN
	nn = NNClassifierMLP('D', d_training, 'LAYERS', [20 20]);
	nn.get('TRAIN');
	
	% Evaluate the feature importance
	d_comb = NNDatasetCombine('D_LIST', {d1, d2}).get('D');
	fi = NNxMLP_FeatureImportanceAcrossFUN('BA', ba, 'AE_TEMPLATE', a_WU1, 'D', d_comb, 'NN', nn, 'GR_FUN_LIST', {gr1, gr2}, 'P', 5, 'APPLY_BONFERRONI', true, 'APPLY_CONFIDENCE_INTERVALS', true);
	fi_score = fi.get('FEATURE_IMPORTANCE');
	num_br = ba.get('BR_DICT').get('LENGTH');
	
	assert(isequal(length(cell2mat(fi_score)), num_br), ...
		        [BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		        'NNxMLP_FeatureImportanceAcrossFUN does not have the feature importance score array as intended.' ...
		        )
	
	% Test GUI
	gui = GUIElement('PE', fi, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':NNxMLP_FeatureImportanceAcrossFUN:' BRAPH2.FAIL_TEST], ...
		[' When testing NNxMLP_FeatureImportanceAcrossFUN no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

